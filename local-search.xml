<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>markdown简单语法</title>
    <link href="/2023/04/12/markdown/"/>
    <url>/2023/04/12/markdown/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>github下搭建Hexo博客</title>
    <link href="/2023/04/11/github%E4%B8%8B%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/04/11/github%E4%B8%8B%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>GitHub账号</li><li>安装Git</li><li>安装NodeJS<br>创建仓库，格式必须为&lt;用户名&gt;.github.io</li></ul><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>-g hexo-cli<br><br>hexo -v<br><br>hexo init hexo-<span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span><br>cd hexo-<span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span><br>npm <span class="hljs-keyword">install</span><br><span class="hljs-keyword"></span><br>hexo clean<br><br>hexo g<br><br>hexo server<br></code></pre></td></tr></table></figure><p>浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a></p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p><a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">https://github.com/fluid-dev/hexo-theme-fluid/releases</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd hexo-blog<br><br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluid-dev/</span>hexo-theme-fluid<span class="hljs-regexp">/releases themes/</span><span class="hljs-keyword">next</span><br><br><span class="hljs-regexp">//</span> 打开 _config.yml 文件 将主题修改为 <span class="hljs-keyword">next</span>(将主题文件地址放在themes下，theme更改为对应文件名)<br>theme: <span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><h3 id="发布到GitHub-Pages"><a href="#发布到GitHub-Pages" class="headerlink" title="发布到GitHub Pages"></a>发布到GitHub Pages</h3><p>安装hexo-deployer-git</p><p>npm install hexo-deployer-git –save</p><p>修改根目录下的 _config.yml，配置 GitHub 相关信息</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> git@github.com:xxx/xxx.github.io.git<br><span class="hljs-symbol">  branch:</span> master<br></code></pre></td></tr></table></figure><p>部署到GitHub</p><p>hexo g -d</p><h3 id="部署到nginx"><a href="#部署到nginx" class="headerlink" title="部署到nginx"></a>部署到nginx</h3><ul><li>hexo g 生成静态文件</li><li>上传到nginx服务器</li><li>配置nginx访问地址</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  <span class="hljs-number">127.0.0.1</span>;<br><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">root</span>  /data/www/blog;<br>        <span class="hljs-attribute">index</span>  index.html index.htm;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ngnix部署运行</title>
    <link href="/2023/04/11/Ngnix%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C/"/>
    <url>/2023/04/11/Ngnix%E9%83%A8%E7%BD%B2%E8%BF%90%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="Ngnix下载"><a href="#Ngnix下载" class="headerlink" title="Ngnix下载"></a>Ngnix下载</h3><p>官方网站：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p><h3 id="启动Ngnix"><a href="#启动Ngnix" class="headerlink" title="启动Ngnix"></a>启动Ngnix</h3><ul><li>直接双击nginx.exe，双击后一个黑色的弹窗一闪而过。</li><li>打开cmd命令窗口，切换到nginx目录下，输入命令 nginx.exe 或者 start nginx ，回车即可。</li></ul><h3 id="关闭nginx"><a href="#关闭nginx" class="headerlink" title="关闭nginx"></a>关闭nginx</h3><p>如果使用cmd命令窗口启动nginx，关闭cmd窗口是不能结束nginx进程的，可使用两种方法关闭nginx</p><ul><li>输入nginx命令 nginx -s stop(快速停止nginx) 或 nginx -s quit(完整有序的停止nginx)。</li></ul><h3 id="打包文件存放"><a href="#打包文件存放" class="headerlink" title="打包文件存放"></a>打包文件存放</h3><ul><li>文件放在html</li><li>nginx.conf下修改配置文件 root文件存放位置 listen端口</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git常用命令</title>
    <link href="/2023/04/11/Git/"/>
    <url>/2023/04/11/Git/</url>
    
    <content type="html"><![CDATA[<h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><p>初始化项目所在目录，初始化后会在当前目录下出现一个名为 .git 的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 初始化本地仓库，在当前目录下生成 .git 文件夹</span><br>$ git init<br><br></code></pre></td></tr></table></figure><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p>把要提交的文件的信息添加到暂存区中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 所有文件添加到暂存区中</span><br>$ git add .<br><br><span class="hljs-comment"># 把指定的文件添加到暂存区中</span><br>$ git add &lt;文件路径&gt;<br><br><span class="hljs-comment"># 添加所有修改、已删除的文件到暂存区中</span><br>$ git add -u [&lt;文件路径&gt;]<br>$ git add --update [&lt;文件路径&gt;]<br><br><span class="hljs-comment"># 添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</span><br>$ git add -A [&lt;文件路径&gt;]<br>$ git add --all [&lt;文件路径&gt;]<br><br><span class="hljs-comment"># 查看所有修改、已删除但没有提交的文件，进入一个子命令系统</span><br>$ git add -i [&lt;文件路径&gt;]<br>$ git add --interactive [&lt;文件路径&gt;]<br><br></code></pre></td></tr></table></figure><h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h3><p>从远程仓库获取最新版本并合并到本地。 首先会执行 git fetch，然后执行 git merge，把获取的分支的 HEAD 合并到当前分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 从远程仓库获取最新版本。</span><br>$ git pull<br><br></code></pre></td></tr></table></figure><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>将索引的当前内容与描述更改的用户和日志消息一起存储在新的提交中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息</span><br>$ git commit<br><br><span class="hljs-comment"># 把暂存区中的文件提交到本地仓库中并添加描述信息</span><br>$ git commit -m <span class="hljs-string">&quot;&lt;提交的描述信息&gt;&quot;</span><br><br><span class="hljs-comment"># 把所有修改、已删除的文件提交到本地仓库中</span><br><span class="hljs-comment"># 不包括未被版本库跟踪的文件，等同于先调用了 &quot;git add -u&quot;</span><br>$ git commit -a -m <span class="hljs-string">&quot;&lt;提交的描述信息&gt;&quot;</span><br><br><span class="hljs-comment"># 修改上次提交的描述信息</span><br>$ git commit --amend<br><br></code></pre></td></tr></table></figure><h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p>把本地仓库的提交推送到远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># 把本地仓库的分支推送到远程仓库的指定分支</span><br>$ git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;<br><br><span class="hljs-comment"># 删除指定的远程仓库的分支</span><br>$ git push &lt;远程仓库的别名&gt; :&lt;远程分支名&gt;<br>$ git push &lt;远程仓库的别名&gt; --delete &lt;远程分支名&gt;<br>例：git push origin master<br><br></code></pre></td></tr></table></figure><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><p>操作 Git 的分支命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 列出本地的所有分支，当前所在分支以 &quot;*&quot; 标出</span><br>$ git branch<br><br><span class="hljs-comment"># 列出本地的所有分支并显示最后一次提交，当前所在分支以 &quot;*&quot; 标出</span><br>$ git branch -v<br><br><span class="hljs-comment"># 创建新分支，新的分支基于上一次提交建立</span><br>$ git branch &lt;分支名&gt;<br><br><span class="hljs-comment"># 修改分支名称</span><br><span class="hljs-comment"># 如果不指定原分支名称则为当前所在分支</span><br>$ git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;<br><span class="hljs-comment"># 强制修改分支名称</span><br>$ git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;<br><br><span class="hljs-comment"># 删除指定的本地分支</span><br>$ git branch -d &lt;分支名称&gt;<br><br><span class="hljs-comment"># 强制删除指定的本地分支</span><br>$ git branch -D &lt;分支名称&gt;<br></code></pre></td></tr></table></figure><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><p>显示提交的记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 打印所有的提交记录</span><br>$ git <span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># 打印从第一次提交到指定的提交的记录</span><br>$ git <span class="hljs-built_in">log</span> &lt;commit ID&gt;<br><br><span class="hljs-comment"># 打印指定数量的最新提交的记录</span><br>$ git <span class="hljs-built_in">log</span> -&lt;指定的数量&gt;<br><br></code></pre></td></tr></table></figure><h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><p>用于将两个或两个以上的开发历史加入(合并)一起。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># 把指定的分支合并到当前所在的分支下，并自动进行新的提交</span><br>$ git merge &lt;分支名称&gt;<br><br><span class="hljs-comment"># 把指定的分支合并到当前所在的分支下，不进行新的提交</span><br>$ git merge --no-commit &lt;分支名称&gt;<br><br></code></pre></td></tr></table></figure><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><p>还原提交记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># 重置暂存区，但文件不受影响</span><br><span class="hljs-comment"># 相当于将用 &quot;git add&quot; 命令更新到暂存区的内容撤出暂存区，可以指定文件</span><br><span class="hljs-comment"># 没有指定 commit ID 则默认为当前 HEAD</span><br>$ git reset [&lt;文件路径&gt;]<br>$ git reset --mixed [&lt;文件路径&gt;]<br><br><span class="hljs-comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span><br>$ git reset &lt;commit ID&gt;<br>$ git reset --mixed &lt;commit ID&gt;<br><br><span class="hljs-comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span><br><span class="hljs-comment"># 相当于调用 &quot;git reset --mixed&quot; 命令后又做了一次 &quot;git add&quot;</span><br>$ git reset --soft &lt;commit ID&gt;<br><br><span class="hljs-comment"># 将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了</span><br>$ git reset --hard &lt;commit ID&gt;<br><br></code></pre></td></tr></table></figure><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><p>将存储库克隆到新创建的目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment"># 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下</span><br>$ git <span class="hljs-built_in">clone</span> &lt;远程仓库的网址&gt;<br><br><span class="hljs-comment"># 指定本地仓库的目录</span><br>$ git <span class="hljs-built_in">clone</span> &lt;远程仓库的网址&gt; &lt;本地目录&gt;<br><br><span class="hljs-comment"># -b 指定要克隆的分支，默认是master分支</span><br>$ git <span class="hljs-built_in">clone</span> &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt;<br></code></pre></td></tr></table></figure><h3 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h3><p>用来配置 Git 的相关参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看配置信息</span><br><span class="hljs-comment"># --local：仓库级，--global：全局级，--system：系统级</span><br>$ git config &lt;--<span class="hljs-built_in">local</span> | --global | --system&gt; -l<br><br><span class="hljs-comment"># 查看当前生效的配置信息</span><br>$ git config -l<br><br><span class="hljs-comment"># 编辑配置文件</span><br><span class="hljs-comment"># --local：仓库级，--global：全局级，--system：系统级</span><br>$ git config &lt;--<span class="hljs-built_in">local</span> | --global | --system&gt; -e<br><br><span class="hljs-comment"># 添加配置项</span><br><span class="hljs-comment"># --local：仓库级，--global：全局级，--system：系统级</span><br>$ git config &lt;--<span class="hljs-built_in">local</span> | --global | --system&gt; --add &lt;name&gt; &lt;value&gt;<br><br><span class="hljs-comment"># 获取配置项</span><br>$ git config &lt;--<span class="hljs-built_in">local</span> | --global | --system&gt; --get &lt;name&gt;<br><br><span class="hljs-comment"># 删除配置项</span><br>$ git config &lt;--<span class="hljs-built_in">local</span> | --global | --system&gt; --<span class="hljs-built_in">unset</span> &lt;name&gt;<br><br><span class="hljs-comment"># 配置提交记录中的用户信息</span><br>$ git config --global user.name &lt;用户名&gt;<br>$ git config --global user.email &lt;邮箱地址&gt;<br><br><span class="hljs-comment"># 更改Git缓存区的大小</span><br><span class="hljs-comment"># 如果提交的内容较大，默认缓存较小，提交会失败</span><br><span class="hljs-comment"># 缓存大小单位：B，例如：524288000（500MB）</span><br>$ git config --global http.postBuffer &lt;缓存大小&gt;<br><br><span class="hljs-comment"># 调用 git status/git diff 命令时以高亮或彩色方式显示改动状态</span><br>$ git config --global color.ui <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 配置可以缓存密码，默认缓存时间15分钟</span><br>$ git config --global credential.helper cache<br><br><span class="hljs-comment"># 配置密码的缓存时间</span><br><span class="hljs-comment"># 缓存时间单位：秒</span><br>$ git config --global credential.helper <span class="hljs-string">&#x27;cache --timeout=&lt;缓存时间&gt;&#x27;</span><br><br><span class="hljs-comment"># 配置长期存储密码</span><br>$ git config --global credential.helper store<br><br></code></pre></td></tr></table></figure><h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><p>更新工作树中的文件以匹配索引或指定树中的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 切换到已存在的指定分支</span><br>$ git checkout &lt;分支名称&gt;<br><br><span class="hljs-comment"># 创建并切换到指定的分支，保留所有的提交记录</span><br><span class="hljs-comment"># 等同于 &quot;git branch&quot; 和 &quot;git checkout&quot; 两个命令合并</span><br>$ git checkout -b &lt;分支名称&gt;<br><br><span class="hljs-comment"># 创建并切换到指定的分支，删除所有的提交记录</span><br>$ git checkout --orphan &lt;分支名称&gt;<br><br><span class="hljs-comment"># 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响</span><br>$ git checkout &lt;文件路径&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
